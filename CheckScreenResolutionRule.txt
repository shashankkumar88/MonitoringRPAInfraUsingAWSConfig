import boto3
import json
import time
import os

# Set to True to get the lambda to assume the Role attached on the Config Service (useful for cross-account).
ASSUME_ROLE_MODE = False

# This gets the client after assuming the Config service role
# either in the same AWS account or cross-account.
def get_client(service, event):
    """Return the service boto client. It should be used instead of directly calling the client.
    Keyword arguments:
    service -- the service name used for calling the boto.client()
    event -- the event variable given in the lambda handler
    """
    if not ASSUME_ROLE_MODE:
        return boto3.client(service)
    credentials = get_assume_role_credentials(event["executionRoleArn"])
    return boto3.client(service, aws_access_key_id=credentials['AccessKeyId'],
                        aws_secret_access_key=credentials['SecretAccessKey'],
                        aws_session_token=credentials['SessionToken']
                       )

# Helper function used to validate input
def check_defined(reference, reference_name):
    if not reference:
        raise Exception('Error: ', reference_name, 'is not defined')
    return reference

# Check whether the message is OversizedConfigurationItemChangeNotification or not
def is_oversized_changed_notification(message_type):
    check_defined(message_type, 'messageType')
    return message_type == 'OversizedConfigurationItemChangeNotification'

# Get configurationItem using getResourceConfigHistory API
# in case of OversizedConfigurationItemChangeNotification
def get_configuration(resource_type, resource_id, configuration_capture_time):
    result = AWS_CONFIG_CLIENT.get_resource_config_history(
        resourceType=resource_type,
        resourceId=resource_id,
        laterTime=configuration_capture_time,
        limit=1)
    configurationItem = result['configurationItems'][0]
    return convert_api_configuration(configurationItem)

# Convert from the API model to the original invocation model
def convert_api_configuration(configurationItem):
    for k, v in configurationItem.items():
        if isinstance(v, datetime.datetime):
            configurationItem[k] = str(v)
    configurationItem['awsAccountId'] = configurationItem['accountId']
    configurationItem['ARN'] = configurationItem['arn']
    configurationItem['configurationStateMd5Hash'] = configurationItem['configurationItemMD5Hash']
    configurationItem['configurationItemVersion'] = configurationItem['version']
    configurationItem['configuration'] = json.loads(configurationItem['configuration'])
    if 'relationships' in configurationItem:
        for i in range(len(configurationItem['relationships'])):
            configurationItem['relationships'][i]['name'] = configurationItem['relationships'][i]['relationshipName']
    return configurationItem

# Based on the type of message get the configuration item
# either from configurationItem in the invoking event
# or using the getResourceConfigHistory API in getConfiguration function.
def get_configuration_item(invokingEvent):
    check_defined(invokingEvent, 'invokingEvent')
    if is_oversized_changed_notification(invokingEvent['messageType']):
        configurationItemSummary = check_defined(invokingEvent['configurationItemSummary'], 'configurationItemSummary')
        return get_configuration(configurationItemSummary['resourceType'], configurationItemSummary['resourceId'], configurationItemSummary['configurationItemCaptureTime'])
    return check_defined(invokingEvent['configurationItem'], 'configurationItem')

# Check whether the resource has been deleted. If it has, then the evaluation is unnecessary.
def is_applicable(configurationItem, event):
    try:
        check_defined(configurationItem, 'configurationItem')
        check_defined(event, 'event')
    except:
        return True
    status = configurationItem['configurationItemStatus']
    eventLeftScope = event['eventLeftScope']
    if status == 'ResourceDeleted':
        print("Resource Deleted, setting Compliance Status to NOT_APPLICABLE.")
    return (status == 'OK' or status == 'ResourceDiscovered') and not eventLeftScope

def get_assume_role_credentials(role_arn):
    sts_client = boto3.client('sts')
    try:
        assume_role_response = sts_client.assume_role(RoleArn=role_arn, RoleSessionName="configLambdaExecution")
        return assume_role_response['Credentials']
    except botocore.exceptions.ClientError as ex:
        # Scrub error message for any internal account info leaks
        if 'AccessDenied' in ex.response['Error']['Code']:
            ex.response['Error']['Message'] = "AWS Config does not have permission to assume the IAM role."
        else:
            ex.response['Error']['Message'] = "InternalError"
            ex.response['Error']['Code'] = "InternalError"
        raise ex

def evaluate_change_notification_compliance(configuration_item, rule_parameters):
    check_defined(configuration_item, 'configuration_item')
    check_defined(configuration_item['configuration'], 'configuration_item[\'configuration\']')
    if rule_parameters:
        check_defined(rule_parameters, 'rule_parameters')
    if (configuration_item['resourceType'] != 'AWS::EC2::Instance'):
        return 'NOT_APPLICABLE'
    elif rule_parameters.get('desiredInstanceType'):
        if (configuration_item['configuration']['instanceType'] in rule_parameters['desiredInstanceType']):
            return 'COMPLIANT'
    return 'NON_COMPLIANT'
    
def evaluate_compliance(configuration_item, rule_parameters,instance_ids,command):
    ssm = boto3.client('ssm') #Get SSM Reference
    response = ssm.send_command(InstanceIds=instance_ids,DocumentName='AWS-RunPowerShellScript',DocumentVersion='$DEFAULT',DocumentHash='2142e42a19e0955cc09e43600bf2e633df1917b69d2be9693737dfd62e0fdf61',DocumentHashType='Sha256',TimeoutSeconds=120,Comment='string',Parameters={'commands': [command]},MaxErrors='1')
    command_id=response['Command']['CommandId']
    Evaluation = {"ComplianceResourceType": "AWS::EC2::Instance","ComplianceResourceId": "","ComplianceType": "","OrderingTimestamp":""}
    Evaluations=[]
    for instance_id in instance_ids:
        result=getCommandOutput(command_id,instance_id)
        StandardOutputContent=result['StandardOutputContent']
        Evaluation['ComplianceResourceId'] = result['InstanceId']
        if result['Status'].find('Success')!=-1:
            if StandardOutputContent.find(rule_parameters['ScreenResolution']) != -1:
                Evaluation['ComplianceType'] = 'COMPLIANT'
            else:
                Evaluation['ComplianceType'] = 'NON_COMPLIANT'
        else:
            Evaluation['ComplianceType'] = 'NOT_APPLICABLE'
        Evaluation['OrderingTimestamp'] = result['ExecutionStartDateTime']
        Evaluations.append(Evaluation)
    return Evaluations
    
def getCommandOutput(command_id,instance_id):
    ssm = boto3.client('ssm') #Get SSM Reference
    tries = 0
    output = 'False'
    while tries < 50:
        tries = tries + 1
        try:
            time.sleep(0.25)  # some delay always required...
            result = ssm.get_command_invocation(
                CommandId=command_id,
                InstanceId=instance_id,
            )
            if result['Status'] == 'InProgress':
                continue
            output = result['StandardOutputContent']
            break
        except ssm.exceptions.InvocationDoesNotExist:
            continue
    return result
    
def lambda_handler(event, context):
    global AWS_CONFIG_CLIENT
    check_defined(event, 'event')
    invoking_event = json.loads(event['invokingEvent'])
    rule_parameters = {}
    if 'ruleParameters' in event:
        rule_parameters = json.loads(event['ruleParameters'])
    AWS_CONFIG_CLIENT = get_client('config', event)
    region = 'us-east-1' #Define EC2 Region
    ec2 = boto3.client('ec2',region) #Get EC2 Reference
    #Get All Running EC2 Instance tagged RPA
    response = ec2.describe_instances(Filters=[{'Name': 'tag:RPA', 'Values': ["RPA"]},{'Name': 'instance-state-name', 'Values': ["running"]}])
    instances_full_details = response['Reservations']
    instance_ids=[]
    for instance_detail in instances_full_details:
        group_instances = instance_detail['Instances']
        for instance in group_instances:
            instance_id = instance['InstanceId']
            instance_ids.append(instance_id)
    Evaluations=[]
    command='(Get-WmiObject -Class Win32_VideoController).VideoModeDescription' #Define PowerShellCommand
    Evaluations=evaluate_compliance(invoking_event, rule_parameters,instance_ids,command)
    response = AWS_CONFIG_CLIENT.put_evaluations(
       Evaluations=Evaluations,
       ResultToken=event['resultToken'],
       TestMode=False)